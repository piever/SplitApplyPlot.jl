var documenterSearchIndex = {"docs":
[{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"EditURL = \"https://github.com/piever/SplitApplyPlot.jl/blob/master/docs/src/generated/tutorial.jl\"","category":"page"},{"location":"generated/tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"Example use of SplitApplyPlot. The function draw takes a dataset, a grouping and a mapping (a combined object with positional and keyword arguments).","category":"page"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"using SplitApplyPlot, CairoMakie\n\ndf = (\n    x=rand(100),\n    y=rand(100),\n    z=rand(100),\n    c=rand(Bool, 100),\n    d=rand(Bool, 100),\n    e=rand(Bool, 100),\n)\n\ndraw(\n    Scatter,\n    df,\n    (marker=:c, layout_x=:d, layout_y=:e),\n    mapping(:x, :y, color=:z),\n    resolution = (600, 600),\n)\nAbstractPlotting.save(\"scatter.svg\", AbstractPlotting.current_scene()); nothing #hide","category":"page"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"(Image: )","category":"page"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"Axis information can also be passed in the grouping (this interface might change)","category":"page"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"draw(\n    Scatter,\n    df,\n    (marker=:c, layout_x=:d, layout_y=:e, title=:e),\n    mapping(:x, :y, color=:z),\n    resolution = (600, 600),\n)\nAbstractPlotting.save(\"scatter_title.svg\", AbstractPlotting.current_scene()); nothing #hide","category":"page"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"(Image: )","category":"page"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"A mutating approach is also possible for additional tweaking. The function draw! takes a mutating function as first argument. It returns the matrix of axes for further tweaking (it may return more things in the future).","category":"page"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"fig = Figure(resolution = (600, 600))\nmat = draw!(fig, df, (marker=:c, layout_x=:d, layout_y=:e), mapping(:x, :y, color=:z)) do ax, m\n    plot!(Scatter, ax, m)\n    ax.xticklabelrotation[] = π/2\nend\nhideinnerdecorations!(mat)\nfig\nAbstractPlotting.save(\"scatter_mutating.svg\", AbstractPlotting.current_scene()); nothing #hide","category":"page"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"(Image: )","category":"page"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"","category":"page"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"SplitApplyPlot","title":"SplitApplyPlot","text":"CurrentModule = SplitApplyPlot","category":"page"},{"location":"#SplitApplyPlot","page":"SplitApplyPlot","title":"SplitApplyPlot","text":"","category":"section"},{"location":"","page":"SplitApplyPlot","title":"SplitApplyPlot","text":"Documentation for SplitApplyPlot.","category":"page"},{"location":"API/#API","page":"API","title":"API","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"","category":"page"},{"location":"API/","page":"API","title":"API","text":"Modules = [SplitApplyPlot]","category":"page"},{"location":"API/#SplitApplyPlot.apply_scale-Tuple{Any, Any, Any}","page":"API","title":"SplitApplyPlot.apply_scale","text":"apply_scale(scale, uniquevalues, value)\n\nReturn the value in scale corresponding to the index of value in uniquevalues. Cycle through scale if it has less entries than uniquevalues.\n\n\n\n\n\n","category":"method"},{"location":"API/#SplitApplyPlot.draw!-Tuple{Any, Any, Any, NamedTuple, SplitApplyPlot.Mapping}","page":"API","title":"SplitApplyPlot.draw!","text":"draw!(f, fig, data, [by::NamedTuple], select::Mapping)\n\nGroup data by columns specified in by, select columns in select, and plot those values on fig using the function f. f can also be an AbstractPlot, such as Scatter or BarPlot. Return the matrix of axes drawn on fig (this may change).\n\nExamples\n\njulia> using SplitApplyPlot, CairoMakie\n\njulia> data = (a=rand(100), b=rand(100), c=rand(100), d=rand([\"a\", \"b\"], 100));\n\njulia> fig = Figure()\n\njulia> draw!(Scatter, fig, data, (marker = :d,), mapping(:a, :b, color=:c))\n\njulia> display(fig)\n\njulia> fig = Figure()\n\njulia> mat = draw!(fig, data, (layout_x = :d,), mapping(:a, :b, color=:c)) do ax, m\n    plot!(Scatter, ax, m)\n    ax.xticklabelrotation[] = π/2\nend\n\njulia> hideinnerdecorations!(mat)\n\njulia> display(fig)\n\n\n\n\n\n","category":"method"},{"location":"API/#SplitApplyPlot.draw-Tuple{Any, Vararg{Any, N} where N}","page":"API","title":"SplitApplyPlot.draw","text":"draw(f, args...; kwargs...)\n\nCreate fig::Figure with keyword arguments kwargs, then draw on it using draw!, i.e., draw!(f, fig, args...). Return fig.\n\nExamples\n\njulia> using SplitApplyPlot, CairoMakie\n\njulia> data = (a=rand(100), b=rand(100), c=rand(100), d=rand([\"a\", \"b\"], 100));\n\njulia> draw(Scatter, data, (marker = :d,), mapping(:a, :b, color=:c))\n\n\n\n\n\n","category":"method"},{"location":"API/#SplitApplyPlot.iscontinuous-Tuple{AbstractVector{T} where T}","page":"API","title":"SplitApplyPlot.iscontinuous","text":"iscontinuous(v::AbstractVector)\n\nDetermine whether v should be treated as a continuous or categorical vector.\n\n\n\n\n\n","category":"method"}]
}
