var documenterSearchIndex = {"docs":
[{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"EditURL = \"https://github.com/piever/SplitApplyPlot.jl/blob/master/docs/src/generated/gallery.jl\"","category":"page"},{"location":"generated/gallery/#Example-gallery","page":"Example gallery","title":"Example gallery","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"Semi-curated collection of examples.","category":"page"},{"location":"generated/gallery/#Lines-and-markers","page":"Example gallery","title":"Lines and markers","text":"","category":"section"},{"location":"generated/gallery/#A-simple-scatter-plot","page":"Example gallery","title":"A simple scatter plot","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"using SplitApplyPlot, CairoMakie\n\ndf = (x=rand(100), y=rand(100))\ndata(df) * mapping(:x, :y) |> plot","category":"page"},{"location":"generated/gallery/#A-simple-lines-plot","page":"Example gallery","title":"A simple lines plot","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"x = range(-π, π, length=100)\ny = sin.(x)\ndf = (; x, y)\ndata(df) * mapping(:x, :y) * visual(Lines) |> plot","category":"page"},{"location":"generated/gallery/#Lines-and-scatter-combined-plot","page":"Example gallery","title":"Lines and scatter combined plot","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"x = range(-π, π, length=100)\ny = sin.(x)\ndf = (; x, y)\ndata(df) * mapping(:x, :y) * (visual(Scatter) + visual(Lines)) |> plot","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"x = range(-π, π, length=100)\ny = sin.(x)\ndf1 = (; x, y)\ndf2 = (x=rand(10), y=rand(10))\nm = mapping(:x, :y)\ngeoms = data(df1) * visual(Lines) + data(df2) * visual(Scatter)\nplot(m * geoms)","category":"page"},{"location":"generated/gallery/#Linear-regression-on-a-scatter-plot","page":"Example gallery","title":"Linear regression on a scatter plot","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (x=rand(100), y=rand(100), z=rand(100))\nm = data(df) * mapping(:x, :y)\ngeoms = linear() + visual(Scatter) * mapping(color=:z)\nplot(m * geoms)","category":"page"},{"location":"generated/gallery/#Faceting","page":"Example gallery","title":"Faceting","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"The \"facet style\" is only applied with an explicit call to facet!.","category":"page"},{"location":"generated/gallery/#Facet-grid","page":"Example gallery","title":"Facet grid","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (x=rand(100), y=rand(100), i=rand([\"a\", \"b\", \"c\"], 100), j=rand([\"d\", \"e\", \"f\"], 100))\ndata(df) * mapping(:x, :y, col=:i, row=:j) |> plot |> facet!","category":"page"},{"location":"generated/gallery/#Facet-wrap","page":"Example gallery","title":"Facet wrap","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (x=rand(100), y=rand(100), l=rand([\"a\", \"b\", \"c\", \"d\", \"e\"], 100))\ndata(df) * mapping(:x, :y, layout=:l) |> plot |> facet!","category":"page"},{"location":"generated/gallery/#Embedding-facets","page":"Example gallery","title":"Embedding facets","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"All SplitApplyPlot plots can be inserted in any figure position, where the rest of the figure is managed by vanilla Makie. For example","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (x=rand(100), y=rand(100), i=rand([\"a\", \"b\", \"c\"], 100), j=rand([\"d\", \"e\", \"f\"], 100))\nresolution = (1200, 600)\nfig = Figure(; resolution)\nax = Axis(fig[1, 1], title=\"Some plot\")\nlayer = data(df) * mapping(:x, :y, col=:i, row=:j)\nsubfig = fig[1, 2:3]\nag = plot!(subfig, layer)\nfacet!(subfig, ag)\nfor ae in ag\n    Axis(ae).xticklabelrotation[] = π/2\nend\ndisplay(fig)","category":"page"},{"location":"generated/gallery/#Adding-traces-to-only-some-subplots","page":"Example gallery","title":"Adding traces to only some subplots","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df1 = (x=rand(100), y=rand(100), i=rand([\"a\", \"b\", \"c\"], 100), j=rand([\"d\", \"e\", \"f\"], 100))\ndf2 = (x=[0, 1], y=[0.5, 0.5], i=fill(\"a\", 2), j=fill(\"e\", 2))\nm = mapping(:x, :y, col=:i, row=:j)\ngeoms = data(df1) * visual(Scatter) + data(df2) * visual(Lines)\nm * geoms |> plot |> facet!","category":"page"},{"location":"generated/gallery/#Statistical-analyses","page":"Example gallery","title":"Statistical analyses","text":"","category":"section"},{"location":"generated/gallery/#Density-plot","page":"Example gallery","title":"Density plot","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (x=randn(1000), c=rand([\"a\", \"b\"], 1000))\ndata(df) * mapping(:x, color=:c) * SplitApplyPlot.density(bandwidth=0.5) |> plot","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"Using the recipe from AbstractPlotting also works (let us try to figure out whether we need an analysis or not).","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (x=randn(1000), c=rand([\"a\", \"b\"], 1000))\ndata(df) * mapping(:x, col=:c) * visual(AbstractPlotting.Density) |> plot |> facet!","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (x=randn(1000), c=rand([\"a\", \"b\"], 1000))\nlayer = data(df) * mapping(:x, color=:c) * SplitApplyPlot.density(bandwidth=0.5) *\n    visual(orientation=:vertical)\n\"Not yet supported\" # hide","category":"page"},{"location":"generated/gallery/#Discrete-scales","page":"Example gallery","title":"Discrete scales","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"By default categorical ticks, as well as names from legend entries, are taken from the value of the variable converted to a string. Scales can be equipped with labels to overwrite that","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (x=rand([\"a\", \"b\", \"c\"], 100), y=rand(100))\ndata(df) * mapping(:x, :y) * visual(BoxPlot) |> plot","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (x=rand([\"a\", \"b\", \"c\"], 100), y=rand(100))\nlayer = data(df) *\n    mapping(\n        :x => renamer(\"a\" => \"label1\", \"b\" => \"label2\", \"c\" => \"label3\"),\n        :y\n    ) * visual(BoxPlot)\nplot(layer)","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"The order can also be changed by tweaking the scale","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"layer = data(df) *\n    mapping(\n        :x => renamer(\"b\" => \"label b\", \"a\" => \"label a\", \"c\" => \"label c\"),\n        :y\n    ) * visual(BoxPlot)\nplot(layer)","category":"page"},{"location":"generated/gallery/#Continuous-scales","page":"Example gallery","title":"Continuous scales","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"x = 1:100\ny = @. sqrt(x) + 20x + 100\ndf = (; x, y)\nlayer = data(df) *\n    mapping(\n        :x,\n        :y => log => \"√x + 20x + 100 (log scale)\",\n    ) * visual(Lines)\nplot(layer)","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"x = 1:100\ny = @. sqrt(x) + 20x + 100\ndf = (; x, y)\nlayer = data(df) *\n    mapping(\n        :x,\n        :y => \"√x + 20x + 100\",\n    ) * visual(Lines)\nplot(layer, axis=(yscale=log,))","category":"page"},{"location":"generated/gallery/#Custom-scales","page":"Example gallery","title":"Custom scales","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"Sometimes, there is no default palettes for a specific attribute. In that case, the user can pass their own.","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"using Colors\nx=repeat(1:20, inner=20)\ny=repeat(1:20, outer=20)\nu=cos.(x)\nv=sin.(y)\nc=rand(Bool, length(x))\nd=rand(Bool, length(x))\ndf = (; x, y, u, v, c, d)\ncolors = [colorant\"#E24A33\", colorant\"#348ABD\"]\nheads = ['▲', '●']\nlayer = data(df) *\n    mapping(:x, :y, :u, :v) *\n    mapping(arrowhead=:c => nonnumeric) *\n    mapping(arrowcolor=:d => nonnumeric) *\n    visual(Arrows, arrowsize=10, lengthscale=0.3)\nplot(layer; palettes=(arrowcolor=colors, arrowhead=heads))","category":"page"},{"location":"generated/gallery/#Axis-and-figure-keywords","page":"Example gallery","title":"Axis and figure keywords","text":"","category":"section"},{"location":"generated/gallery/#Axis-tweaking","page":"Example gallery","title":"Axis tweaking","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"To tweak one or more axes, simply use the axis keyword when plotting. For example","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (x=rand(100), y=rand(100), z=rand(100))\nm = data(df) * mapping(:x, :y)\ngeoms = linear() + visual(Scatter) * mapping(color=:z)\nplot(m * geoms, axis=(aspect=1,))","category":"page"},{"location":"generated/gallery/#Figure-tweaking","page":"Example gallery","title":"Figure tweaking","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (x=rand(100), y=rand(100), z=rand(100), c=rand([\"a\", \"b\"], 100))\nm = data(df) * mapping(:x, :y, layout=:c)\ngeoms = linear() + visual(Scatter) * mapping(color=:z)\nfg = plot(m * geoms, axis=(aspect=1,), figure=(resolution=(1200, 600),))\nfacet!(fg)","category":"page"},{"location":"generated/gallery/#Multiple-selection","page":"Example gallery","title":"Multiple selection","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"Selecting multiple columns at once can have two possible applications. One is \"wide data\", the other is on-the-fly creating of novel columns.","category":"page"},{"location":"generated/gallery/#Wide-data","page":"Example gallery","title":"Wide data","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (a=randn(100), b=randn(100), c=randn(100))\nm = data(df) * mapping((:a, :b, :c) .=> \"some label\") * mapping(color=dims(1))\nplot(m * SplitApplyPlot.density())","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (a=rand(100), b=rand(100), c=rand(100), d=rand(100))\nm = data(df) * mapping(1, 2:4, color=dims(1))\ngeoms = linear() + visual(Scatter)\nfg = plot(m * geoms)","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"The wide format is combined with broadcast semantics.","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (sepal_length=rand(100), sepal_width=rand(100), petal_length=rand(100), petal_width=rand(100))\nxvars = [\"sepal_length\", \"sepal_width\"]\nyvars = [\"petal_length\" \"petal_width\"]\nm = data(df) * mapping(\n    xvars .=> \"sepal\",\n    yvars .=> \"petal\",\n    row=dims(1) => c -> split(xvars[c], '_')[2],\n    col=dims(2) => c -> split(yvars[c], '_')[2],\n)\ngeoms = linear() + visual(Scatter)\nfacet!(plot(m * geoms))","category":"page"},{"location":"generated/gallery/#New-columns-on-the-fly","page":"Example gallery","title":"New columns on the fly","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (x=rand(100), y=rand(100), z=rand(100), c=rand([\"a\", \"b\"], 100))\nm = data(df) * mapping(:x, (:x, :y, :z) => (+) => \"x + y + z\", layout=:c)\ngeoms = linear() + visual(Scatter) * mapping(color=:z)\nfg = plot(m * geoms)\nfacet!(fg)","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/entries/","page":"Entries","title":"Entries","text":"EditURL = \"https://github.com/piever/SplitApplyPlot.jl/blob/master/docs/src/generated/entries.jl\"","category":"page"},{"location":"generated/entries/#Entries","page":"Entries","title":"Entries","text":"","category":"section"},{"location":"generated/entries/","page":"Entries","title":"Entries","text":"The key ingredient for data representations are AxisEntries.","category":"page"},{"location":"generated/entries/#The-AxisEntries-type","page":"Entries","title":"The AxisEntries type","text":"","category":"section"},{"location":"generated/entries/","page":"Entries","title":"Entries","text":"An AxisEntries object is made of four components:","category":"page"},{"location":"generated/entries/","page":"Entries","title":"Entries","text":"axis,\nentries.","category":"page"},{"location":"generated/entries/","page":"Entries","title":"Entries","text":"using SplitApplyPlot, CairoMakie\nusing SplitApplyPlot: CategoricalScale, ContinuousScale\nresolution = (600, 600)\nfig = Figure(; resolution)\nN = 11\nrg = range(1, 2, length=N)\nae = AxisEntries(\n    Axis(fig[1, 1]),\n    [\n        Entry(\n            Scatter,\n            arguments(rg, cosh.(rg), color=1:N, marker=fill(\"b\", N));\n            markersize = 15\n        ),\n        Entry(\n            Scatter,\n            arguments(rg, sinh.(rg), color=1:N, marker=fill(\"c\", N));\n            markersize = 15\n        ),\n    ],\n    arguments(\n        ContinuousScale(identity, (0, 1)),\n        ContinuousScale(identity, (0, 1)),\n        color=ContinuousScale(identity, (0, 1)),\n        marker=CategoricalScale([\"a\", \"b\", \"c\"], [:circle, :utriangle, :dtriangle]), #scales\n    ),\n    arguments(\"x\", \"y\", color=\"identity\", marker=\"function\"), #labels\n)\nplot!(ae)\ndisplay(fig)","category":"page"},{"location":"generated/entries/","page":"Entries","title":"Entries","text":"","category":"page"},{"location":"generated/entries/","page":"Entries","title":"Entries","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/statistical_plots/","page":"Statistical plots","title":"Statistical plots","text":"EditURL = \"https://github.com/piever/SplitApplyPlot.jl/blob/master/docs/src/generated/statistical_plots.jl\"","category":"page"},{"location":"generated/statistical_plots/#Statistical-plots","page":"Statistical plots","title":"Statistical plots","text":"","category":"section"},{"location":"generated/statistical_plots/","page":"Statistical plots","title":"Statistical plots","text":"using RDatasets: dataset\nusing SplitApplyPlot, CairoMakie\nmpg = dataset(\"ggplot2\", \"mpg\");\nmpg.IsAudi = mpg.Manufacturer .== \"audi\"\n\ndata(mpg) *\n    mapping(:Displ, :Hwy, col=:IsAudi => nonnumeric) *\n    visual(QQPlot, qqline=:fit) |> draw","category":"page"},{"location":"generated/statistical_plots/","page":"Statistical plots","title":"Statistical plots","text":"","category":"page"},{"location":"generated/statistical_plots/","page":"Statistical plots","title":"Statistical plots","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"EditURL = \"https://github.com/piever/SplitApplyPlot.jl/blob/master/docs/src/generated/tutorial.jl\"","category":"page"},{"location":"generated/tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"Here we will see what are the basic building blocks of SplitApplyPlot, and how to combine them to create complex plots based on tables or other formats.","category":"page"},{"location":"generated/tutorial/#Basic-building-blocks","page":"Tutorial","title":"Basic building blocks","text":"","category":"section"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"The most important functions are mapping, and visual. mapping determines the mappings from data to plot. Its positional arguments correspond to the x, y or z axes of the plot, whereas the keyword arguments correspond to plot attributes that can vary continuously or discretely, such as color or markersize. Variables in mapping are split according to the categorical attributes in it, and then converted to plot attributes using a default palette. visual can be used to give data-independent visual information about the plot (plotting function or attributes).","category":"page"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"Finally, data determines what is the dataset to be used.","category":"page"},{"location":"generated/tutorial/#Operations","page":"Tutorial","title":"Operations","text":"","category":"section"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"The outputs of mapping, visual, and data can be combined with + or *, to generate the specification of a complex plot.","category":"page"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"The operation + is used to create separate layers. a + b has as many layers as la + lb, where la and lb are the number of layers in a and b respectively.","category":"page"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"The operation a * b create la * lb layers, where la and lb are the number of layers in a and b respectively. Each layer of a * b contains the combined information of the corresponding layer in a and the corresponding layer in b. In simple cases, however, both a and b will only have one layer, and a * b simply combines the information.","category":"page"},{"location":"generated/tutorial/#Working-with-tables","page":"Tutorial","title":"Working with tables","text":"","category":"section"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"using RDatasets: dataset\nusing SplitApplyPlot, CairoMakie\nmpg = dataset(\"ggplot2\", \"mpg\");\ncols = mapping(:Displ => \"Displacement\", :Hwy => \"Highway miles\");\ngrp = mapping(color = :Cyl => nonnumeric => \"Cylinders\");\nscat = visual(Scatter)\npipeline = cols * scat\ndraw(data(mpg) * pipeline)","category":"page"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"Now let's simply add grp to the pipeline to color according to :Cyl.","category":"page"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"draw(data(mpg) * grp * pipeline)","category":"page"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"Traces can be added together with +.","category":"page"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"pipenew = cols * (scat + linear())\ndraw(data(mpg) * pipenew)","category":"page"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"We can put grouping in the pipeline (we get a warning because of a degenerate group).","category":"page"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"draw(data(mpg) * grp * pipenew)","category":"page"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"This is a more complex example, where we split the scatter plot, but do the linear regression with all the data.","category":"page"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"different_grouping = grp * scat + linear()\ndraw(data(mpg) * cols * different_grouping)","category":"page"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"","category":"page"},{"location":"generated/tutorial/","page":"Tutorial","title":"Tutorial","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/analyses/","page":"Analyses","title":"Analyses","text":"EditURL = \"https://github.com/piever/SplitApplyPlot.jl/blob/master/docs/src/generated/analyses.jl\"","category":"page"},{"location":"generated/analyses/#Analyses","page":"Analyses","title":"Analyses","text":"","category":"section"},{"location":"generated/analyses/#Histogram","page":"Analyses","title":"Histogram","text":"","category":"section"},{"location":"generated/analyses/","page":"Analyses","title":"Analyses","text":"histogram","category":"page"},{"location":"generated/analyses/#SplitApplyPlot.histogram","page":"Analyses","title":"SplitApplyPlot.histogram","text":"histogram(; bins=automatic, wts=automatic, normalization=:none)\n\nCompute a histogram. bins can be an Int to create that number of equal-width bins over the range of values. Alternatively, it can be a sorted iterable of bin edges. The histogram can be normalized by setting normalization. Possible values are:\n\n:pdf: Normalize by sum of weights and bin sizes. Resulting histogram  has norm 1 and represents a PDF.\n:density: Normalize by bin sizes only. Resulting histogram represents  count density of input and does not have norm 1.\n:probability: Normalize by sum of weights only. Resulting histogram  represents the fraction of probability mass for each bin and does not have  norm 1.\n:none: Do not normalize.\n\nWeighted data is supported via the keyword wts.\n\nnote: Note\nNormalizations are computed withing groups. For example, in the case of normalization=:pdf, sum of weights within each group will be equal to 1.\n\n\n\n\n\n","category":"function"},{"location":"generated/analyses/","page":"Analyses","title":"Analyses","text":"using SplitApplyPlot, CairoMakie\n\ndf = (x=randn(1000), y=randn(1000), z=rand([\"a\", \"b\", \"c\"], 1000))\nspecs = data(df) * mapping(:x, layout=:z) * histogram(bins=range(-2, 2, length=15))\ndraw(specs)","category":"page"},{"location":"generated/analyses/","page":"Analyses","title":"Analyses","text":"specs = data(df) * mapping(:x, dodge=:z, color=:z) * histogram(bins=range(-2, 2, length=15))\ndraw(specs)","category":"page"},{"location":"generated/analyses/","page":"Analyses","title":"Analyses","text":"specs = data(df) * mapping(:x, stack=:z, color=:z) * histogram(bins=range(-2, 2, length=15))\ndraw(specs)","category":"page"},{"location":"generated/analyses/","page":"Analyses","title":"Analyses","text":"data(df) * mapping(:x, :y, layout=:z) * histogram(bins=15) |> draw","category":"page"},{"location":"generated/analyses/#Density","page":"Analyses","title":"Density","text":"","category":"section"},{"location":"generated/analyses/","page":"Analyses","title":"Analyses","text":"SplitApplyPlot.density","category":"page"},{"location":"generated/analyses/#SplitApplyPlot.density","page":"Analyses","title":"SplitApplyPlot.density","text":"density(; extrema, npoints, kernel, bandwidth)\n\nFit a kernel density estimation of data.\n\n\n\n\n\n","category":"function"},{"location":"generated/analyses/","page":"Analyses","title":"Analyses","text":"df = (x=randn(5000), y=randn(5000), z=rand([\"a\", \"b\", \"c\", \"d\"], 5000))\ndata(df) * mapping(:x, layout=:z) * SplitApplyPlot.density() |> draw","category":"page"},{"location":"generated/analyses/","page":"Analyses","title":"Analyses","text":"data(df) * mapping(:x, :y, layout=:z) * SplitApplyPlot.density(npoints=50) |> draw","category":"page"},{"location":"generated/analyses/","page":"Analyses","title":"Analyses","text":"specs = data(df) * mapping(:x, :y, layout=:z) *\n    visual(Surface, colormap=:cividis) *\n    SplitApplyPlot.density(npoints=50)\ndraw(specs, axis=(type=Axis3, zticks=0:0.1:0.2, limits=(nothing, nothing, (0, 0.2))))","category":"page"},{"location":"generated/analyses/#Frequency","page":"Analyses","title":"Frequency","text":"","category":"section"},{"location":"generated/analyses/","page":"Analyses","title":"Analyses","text":"frequency","category":"page"},{"location":"generated/analyses/#SplitApplyPlot.frequency","page":"Analyses","title":"SplitApplyPlot.frequency","text":"frequency()\n\nCompute a frequency table of the arguments.\n\n\n\n\n\n","category":"function"},{"location":"generated/analyses/","page":"Analyses","title":"Analyses","text":"df = (x=rand([\"a\", \"b\", \"c\"], 100), y=rand([\"a\", \"b\", \"c\"], 100), z=rand([\"a\", \"b\", \"c\"], 100))\nspecs = data(df) * mapping(:x, layout=:z) * frequency()\ndraw(specs)","category":"page"},{"location":"generated/analyses/","page":"Analyses","title":"Analyses","text":"specs = data(df) * mapping(:x, layout=:z, color=:y, stack=:y) * frequency()\ndraw(specs)","category":"page"},{"location":"generated/analyses/","page":"Analyses","title":"Analyses","text":"specs = data(df) * mapping(:x, :y, layout=:z) * frequency()\ndraw(specs)","category":"page"},{"location":"generated/analyses/#Expectation","page":"Analyses","title":"Expectation","text":"","category":"section"},{"location":"generated/analyses/","page":"Analyses","title":"Analyses","text":"expectation","category":"page"},{"location":"generated/analyses/#SplitApplyPlot.expectation","page":"Analyses","title":"SplitApplyPlot.expectation","text":"expectation(args...)\n\nCompute the expected value of the last argument conditioned on the preceding ones.\n\n\n\n\n\n","category":"function"},{"location":"generated/analyses/","page":"Analyses","title":"Analyses","text":"df = (x=rand([\"a\", \"b\", \"c\"], 100), y=rand([\"a\", \"b\", \"c\"], 100), z=rand(100), c=rand([\"a\", \"b\", \"c\"], 100))\nspecs = data(df) * mapping(:x, :z, layout=:c) * expectation()\ndraw(specs)","category":"page"},{"location":"generated/analyses/","page":"Analyses","title":"Analyses","text":"specs = data(df) * mapping(:x, :z, layout=:c, color=:y, dodge=:y) * expectation()\ndraw(specs)","category":"page"},{"location":"generated/analyses/","page":"Analyses","title":"Analyses","text":"specs = data(df) * mapping(:x, :y, :z, layout=:c) * expectation()\ndraw(specs)","category":"page"},{"location":"generated/analyses/#Linear","page":"Analyses","title":"Linear","text":"","category":"section"},{"location":"generated/analyses/","page":"Analyses","title":"Analyses","text":"using SplitApplyPlot, CairoMakie\n\ndf = (x=randn(30), y=randn(30), z=rand([\"a\", \"b\", \"c\"], 30))\nspecs = data(df) * mapping(:x, :y, color=:z) * (linear() + visual(Scatter))\ndraw(specs, axis=(; limits=(-2, 2, -2, 2)))","category":"page"},{"location":"generated/analyses/#Smoothing","page":"Analyses","title":"Smoothing","text":"","category":"section"},{"location":"generated/analyses/","page":"Analyses","title":"Analyses","text":"specs = data(df) * mapping(:x, :y, color=:z) * (smooth() + visual(Scatter))\ndraw(specs, axis=(; limits=(-2, 2, -2, 2)))","category":"page"},{"location":"generated/analyses/","page":"Analyses","title":"Analyses","text":"","category":"page"},{"location":"generated/analyses/","page":"Analyses","title":"Analyses","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"SplitApplyPlot","title":"SplitApplyPlot","text":"CurrentModule = SplitApplyPlot","category":"page"},{"location":"#SplitApplyPlot","page":"SplitApplyPlot","title":"SplitApplyPlot","text":"","category":"section"},{"location":"","page":"SplitApplyPlot","title":"SplitApplyPlot","text":"Documentation for SplitApplyPlot.","category":"page"},{"location":"API/#API","page":"API","title":"API","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"","category":"page"},{"location":"API/","page":"API","title":"API","text":"Modules = [SplitApplyPlot]","category":"page"},{"location":"API/#SplitApplyPlot.AxisEntries","page":"API","title":"SplitApplyPlot.AxisEntries","text":"AxisEntries(axis::Union{Axis, Nothing}, entries::Vector{Entry}, labels, scales)\n\nDefine all ingredients to make plots on an axis. Each scale can be either a CategoricalScale (for discrete collections), such as CategoricalScale([\"a\", \"b\"], [\"red\", \"blue\"]), or a function, such as log10. Other scales may be supported in the future.\n\n\n\n\n\n","category":"type"},{"location":"API/#SplitApplyPlot.density-Tuple{}","page":"API","title":"SplitApplyPlot.density","text":"density(; extrema, npoints, kernel, bandwidth)\n\nFit a kernel density estimation of data.\n\n\n\n\n\n","category":"method"},{"location":"API/#SplitApplyPlot.expectation-Tuple{}","page":"API","title":"SplitApplyPlot.expectation","text":"expectation(args...)\n\nCompute the expected value of the last argument conditioned on the preceding ones.\n\n\n\n\n\n","category":"method"},{"location":"API/#SplitApplyPlot.frequency-Tuple{}","page":"API","title":"SplitApplyPlot.frequency","text":"frequency()\n\nCompute a frequency table of the arguments.\n\n\n\n\n\n","category":"method"},{"location":"API/#SplitApplyPlot.histogram-Tuple{}","page":"API","title":"SplitApplyPlot.histogram","text":"histogram(; bins=automatic, wts=automatic, normalization=:none)\n\nCompute a histogram. bins can be an Int to create that number of equal-width bins over the range of values. Alternatively, it can be a sorted iterable of bin edges. The histogram can be normalized by setting normalization. Possible values are:\n\n:pdf: Normalize by sum of weights and bin sizes. Resulting histogram  has norm 1 and represents a PDF.\n:density: Normalize by bin sizes only. Resulting histogram represents  count density of input and does not have norm 1.\n:probability: Normalize by sum of weights only. Resulting histogram  represents the fraction of probability mass for each bin and does not have  norm 1.\n:none: Do not normalize.\n\nWeighted data is supported via the keyword wts.\n\nnote: Note\nNormalizations are computed withing groups. For example, in the case of normalization=:pdf, sum of weights within each group will be equal to 1.\n\n\n\n\n\n","category":"method"},{"location":"API/#SplitApplyPlot.iscontinuous-Tuple{AbstractArray}","page":"API","title":"SplitApplyPlot.iscontinuous","text":"iscontinuous(v::AbstractArray)\n\nDetermine whether v should be treated as a continuous or categorical vector.\n\n\n\n\n\n","category":"method"},{"location":"API/#SplitApplyPlot.linesband!-Tuple","page":"API","title":"SplitApplyPlot.linesband!","text":"linesband(xs, ys, lower, upper; kwargs...)\n\nLine plot with a shaded ribbon around it.\n\nAttributes\n\nAvailable attributes and their defaults for AbstractPlotting.Combined{SplitApplyPlot.linesband!, T} where T are: \n\n\n\n\n\n\n\n","category":"method"},{"location":"API/#SplitApplyPlot.linesband-Tuple","page":"API","title":"SplitApplyPlot.linesband","text":"linesband(xs, ys, lower, upper; kwargs...)\n\nLine plot with a shaded ribbon around it.\n\nAttributes\n\nAvailable attributes and their defaults for AbstractPlotting.Combined{SplitApplyPlot.linesband, T} where T are: \n\n  alphamultiplier  0.5\n  color            :black\n  colormap         :viridis\n  colorrange       AbstractPlotting.Automatic()\n  linestyle        \"nothing\"\n  linewidth        1.0\n\n\n\n\n\n","category":"method"},{"location":"API/#SplitApplyPlot.smooth-Tuple{}","page":"API","title":"SplitApplyPlot.smooth","text":"smooth(span=0.75, degreee=2)\n\nFit a loess model. span is the degree of smoothing, typically in [0,1]. Smaller values result in smaller local context in fitting. degree is the polynomial degree used in the loess model.\n\n\n\n\n\n","category":"method"}]
}
