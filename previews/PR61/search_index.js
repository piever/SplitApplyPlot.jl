var documenterSearchIndex = {"docs":
[{"location":"generated/datatransformations/","page":"Data Transformations","title":"Data Transformations","text":"EditURL = \"https://github.com/piever/SplitApplyPlot.jl/blob/master/docs/src/generated/datatransformations.jl\"","category":"page"},{"location":"generated/datatransformations/#Data-Transformations","page":"Data Transformations","title":"Data Transformations","text":"","category":"section"},{"location":"generated/datatransformations/#Histogram","page":"Data Transformations","title":"Histogram","text":"","category":"section"},{"location":"generated/datatransformations/","page":"Data Transformations","title":"Data Transformations","text":"histogram","category":"page"},{"location":"generated/datatransformations/#SplitApplyPlot.histogram","page":"Data Transformations","title":"SplitApplyPlot.histogram","text":"histogram(; bins=automatic, wts=automatic, normalization=:none)\n\nCompute a histogram. bins can be an Int to create that number of equal-width bins over the range of values. Alternatively, it can be a sorted iterable of bin edges. The histogram can be normalized by setting normalization. Possible values are:\n\n:pdf: Normalize by sum of weights and bin sizes. Resulting histogram  has norm 1 and represents a PDF.\n:density: Normalize by bin sizes only. Resulting histogram represents  count density of input and does not have norm 1.\n:probability: Normalize by sum of weights only. Resulting histogram  represents the fraction of probability mass for each bin and does not have  norm 1.\n:none: Do not normalize.\n\nWeighted data is supported via the keyword wts.\n\nnote: Note\nNormalizations are computed withing groups. For example, in the case of normalization=:pdf, sum of weights within each group will be equal to 1.\n\n\n\n\n\n","category":"function"},{"location":"generated/datatransformations/","page":"Data Transformations","title":"Data Transformations","text":"using SplitApplyPlot, CairoMakie\n\ndf = (x=randn(1000), y=randn(1000), z=rand([\"a\", \"b\", \"c\"], 1000))\nspecs = data(df) * mapping(:x, layout=:z) * histogram(bins=range(-2, 2, length=15))\ndraw(specs)","category":"page"},{"location":"generated/datatransformations/","page":"Data Transformations","title":"Data Transformations","text":"specs = data(df) * mapping(:x, dodge=:z, color=:z) * histogram(bins=range(-2, 2, length=15))\ndraw(specs)","category":"page"},{"location":"generated/datatransformations/","page":"Data Transformations","title":"Data Transformations","text":"specs = data(df) * mapping(:x, stack=:z, color=:z) * histogram(bins=range(-2, 2, length=15))\ndraw(specs)","category":"page"},{"location":"generated/datatransformations/","page":"Data Transformations","title":"Data Transformations","text":"data(df) * mapping(:x, :y, layout=:z) * histogram(bins=15) |> draw","category":"page"},{"location":"generated/datatransformations/#Density","page":"Data Transformations","title":"Density","text":"","category":"section"},{"location":"generated/datatransformations/","page":"Data Transformations","title":"Data Transformations","text":"SplitApplyPlot.density","category":"page"},{"location":"generated/datatransformations/#SplitApplyPlot.density","page":"Data Transformations","title":"SplitApplyPlot.density","text":"density(; extrema, npoints, kernel, bandwidth)\n\nFit a kernel density estimation of data.\n\n\n\n\n\n","category":"function"},{"location":"generated/datatransformations/","page":"Data Transformations","title":"Data Transformations","text":"df = (x=randn(5000), y=randn(5000), z=rand([\"a\", \"b\", \"c\", \"d\"], 5000))\ndata(df) * mapping(:x, layout=:z) * SplitApplyPlot.density() |> draw","category":"page"},{"location":"generated/datatransformations/","page":"Data Transformations","title":"Data Transformations","text":"data(df) * mapping(:x, :y, layout=:z) * SplitApplyPlot.density(npoints=50) |> draw","category":"page"},{"location":"generated/datatransformations/","page":"Data Transformations","title":"Data Transformations","text":"specs = data(df) * mapping(:x, :y, layout=:z) *\n    SplitApplyPlot.density(npoints=50) * visual(Surface)\n\ndraw(specs, axis=(type=Axis3, zticks=0:0.1:0.2, limits=(nothing, nothing, (0, 0.2))))","category":"page"},{"location":"generated/datatransformations/#Frequency","page":"Data Transformations","title":"Frequency","text":"","category":"section"},{"location":"generated/datatransformations/","page":"Data Transformations","title":"Data Transformations","text":"frequency","category":"page"},{"location":"generated/datatransformations/#SplitApplyPlot.frequency","page":"Data Transformations","title":"SplitApplyPlot.frequency","text":"frequency()\n\nCompute a frequency table of the arguments.\n\n\n\n\n\n","category":"function"},{"location":"generated/datatransformations/","page":"Data Transformations","title":"Data Transformations","text":"df = (x=rand([\"a\", \"b\", \"c\"], 100), y=rand([\"a\", \"b\", \"c\"], 100), z=rand([\"a\", \"b\", \"c\"], 100))\nspecs = data(df) * mapping(:x, layout=:z) * frequency()\ndraw(specs)","category":"page"},{"location":"generated/datatransformations/","page":"Data Transformations","title":"Data Transformations","text":"specs = data(df) * mapping(:x, layout=:z, color=:y, stack=:y) * frequency()\ndraw(specs)","category":"page"},{"location":"generated/datatransformations/","page":"Data Transformations","title":"Data Transformations","text":"specs = data(df) * mapping(:x, :y, layout=:z) * frequency()\ndraw(specs)","category":"page"},{"location":"generated/datatransformations/#Expectation","page":"Data Transformations","title":"Expectation","text":"","category":"section"},{"location":"generated/datatransformations/","page":"Data Transformations","title":"Data Transformations","text":"expectation","category":"page"},{"location":"generated/datatransformations/#SplitApplyPlot.expectation","page":"Data Transformations","title":"SplitApplyPlot.expectation","text":"expectation(args...)\n\nCompute the expected value of the last argument conditioned on the preceding ones.\n\n\n\n\n\n","category":"function"},{"location":"generated/datatransformations/","page":"Data Transformations","title":"Data Transformations","text":"df = (x=rand([\"a\", \"b\", \"c\"], 100), y=rand([\"a\", \"b\", \"c\"], 100), z=rand(100), c=rand([\"a\", \"b\", \"c\"], 100))\nspecs = data(df) * mapping(:x, :z, layout=:c) * expectation()\ndraw(specs)","category":"page"},{"location":"generated/datatransformations/","page":"Data Transformations","title":"Data Transformations","text":"specs = data(df) * mapping(:x, :z, layout=:c, color=:y, dodge=:y) * expectation()\ndraw(specs)","category":"page"},{"location":"generated/datatransformations/","page":"Data Transformations","title":"Data Transformations","text":"specs = data(df) * mapping(:x, :y, :z, layout=:c) * expectation()\ndraw(specs)","category":"page"},{"location":"generated/datatransformations/#Linear","page":"Data Transformations","title":"Linear","text":"","category":"section"},{"location":"generated/datatransformations/","page":"Data Transformations","title":"Data Transformations","text":"linear","category":"page"},{"location":"generated/datatransformations/#SplitApplyPlot.linear","page":"Data Transformations","title":"SplitApplyPlot.linear","text":"linear(; interval)\n\nCompute a linear fit of y ~ 1 + x. An optional named mapping wts determines the weights. Use interval to specify what type of interval the shaded band should represent. Valid values of interval are :confidence delimiting the uncertainty of the predicted relationship, and :prediction delimiting estimated bounds for new data points.\n\n\n\n\n\n","category":"function"},{"location":"generated/datatransformations/","page":"Data Transformations","title":"Data Transformations","text":"using SplitApplyPlot, CairoMakie\n\nx = 1:0.05:10\na = rand(1:7, length(x))\ny = 1.2 .* x .+ a .+ 0.5 .* randn.()\ndf = (; x, y, a)\nspecs = data(df) * mapping(:x, :y, color=:a => nonnumeric) * (linear() + visual(Scatter))\ndraw(specs)","category":"page"},{"location":"generated/datatransformations/#Smoothing","page":"Data Transformations","title":"Smoothing","text":"","category":"section"},{"location":"generated/datatransformations/","page":"Data Transformations","title":"Data Transformations","text":"smooth","category":"page"},{"location":"generated/datatransformations/#SplitApplyPlot.smooth","page":"Data Transformations","title":"SplitApplyPlot.smooth","text":"smooth(span=0.75, degreee=2)\n\nFit a loess model. span is the degree of smoothing, typically in [0,1]. Smaller values result in smaller local context in fitting. degree is the polynomial degree used in the loess model.\n\n\n\n\n\n","category":"function"},{"location":"generated/datatransformations/","page":"Data Transformations","title":"Data Transformations","text":"x = 1:0.05:10\na = rand(1:7, length(x))\ny = sin.(x) .+ a .+ 0.1 .* randn.()\ndf = (; x, y, a)\nspecs = data(df) * mapping(:x, :y, color=:a => nonnumeric) * (smooth() + visual(Scatter))\ndraw(specs)","category":"page"},{"location":"generated/datatransformations/","page":"Data Transformations","title":"Data Transformations","text":"","category":"page"},{"location":"generated/datatransformations/","page":"Data Transformations","title":"Data Transformations","text":"This page was generated using Literate.jl.","category":"page"},{"location":"layers/operations/#Algebraic-Operations","page":"Algebraic Operations","title":"Algebraic Operations","text":"","category":"section"},{"location":"layers/operations/#Multiplication-on-individual-layers","page":"Algebraic Operations","title":"Multiplication on individual layers","text":"","category":"section"},{"location":"layers/operations/","page":"Algebraic Operations","title":"Algebraic Operations","text":"Each layer is composed of data, mappings, and transformations. Datasets can be replaced, mappings can be merged, and transformations can be concatenated. These operations, taken together, define an associative operation on layers, which we call multiplication (*).","category":"page"},{"location":"layers/operations/","page":"Algebraic Operations","title":"Algebraic Operations","text":"Multiplication is primarily useful to combine partially defined layers.","category":"page"},{"location":"layers/operations/#Addition","page":"Algebraic Operations","title":"Addition","text":"","category":"section"},{"location":"layers/operations/","page":"Algebraic Operations","title":"Algebraic Operations","text":"The operation + is used to superimpose separate layers. a + b has as many layers as la + lb, where la and lb are the number of layers in a and b respectively.","category":"page"},{"location":"layers/operations/#Multiplication-on-lists-of-layers","page":"Algebraic Operations","title":"Multiplication on lists of layers","text":"","category":"section"},{"location":"layers/operations/","page":"Algebraic Operations","title":"Algebraic Operations","text":"Multiplication naturally extends to lists of layers. Given two Layers objects a and b, containing la and lb layers respectively, the product a * b contains la * lb layers—all possible pair-wise products.","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"EditURL = \"https://github.com/piever/SplitApplyPlot.jl/blob/master/docs/src/generated/gallery.jl\"","category":"page"},{"location":"generated/gallery/#Example-gallery","page":"Example gallery","title":"Example gallery","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"Semi-curated collection of examples.","category":"page"},{"location":"generated/gallery/#Lines-and-markers","page":"Example gallery","title":"Lines and markers","text":"","category":"section"},{"location":"generated/gallery/#A-simple-scatter-plot","page":"Example gallery","title":"A simple scatter plot","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"using SplitApplyPlot, CairoMakie\n\ndf = (x=rand(100), y=rand(100))\ndata(df) * mapping(:x, :y) |> plot","category":"page"},{"location":"generated/gallery/#A-simple-lines-plot","page":"Example gallery","title":"A simple lines plot","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"x = range(-π, π, length=100)\ny = sin.(x)\ndf = (; x, y)\ndata(df) * mapping(:x, :y) * visual(Lines) |> plot","category":"page"},{"location":"generated/gallery/#Lines-and-scatter-combined-plot","page":"Example gallery","title":"Lines and scatter combined plot","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"x = range(-π, π, length=100)\ny = sin.(x)\ndf = (; x, y)\ndata(df) * mapping(:x, :y) * (visual(Scatter) + visual(Lines)) |> plot","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"x = range(-π, π, length=100)\ny = sin.(x)\ndf1 = (; x, y)\ndf2 = (x=rand(10), y=rand(10))\nm = mapping(:x, :y)\ngeoms = data(df1) * visual(Lines) + data(df2) * visual(Scatter)\nplot(m * geoms)","category":"page"},{"location":"generated/gallery/#Linear-regression-on-a-scatter-plot","page":"Example gallery","title":"Linear regression on a scatter plot","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (x=rand(100), y=rand(100), z=rand(100))\nm = data(df) * mapping(:x, :y)\ngeoms = linear() + visual(Scatter) * mapping(color=:z)\nplot(m * geoms)","category":"page"},{"location":"generated/gallery/#Faceting","page":"Example gallery","title":"Faceting","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"The \"facet style\" is only applied with an explicit call to facet!.","category":"page"},{"location":"generated/gallery/#Facet-grid","page":"Example gallery","title":"Facet grid","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (x=rand(100), y=rand(100), i=rand([\"a\", \"b\", \"c\"], 100), j=rand([\"d\", \"e\", \"f\"], 100))\ndata(df) * mapping(:x, :y, col=:i, row=:j) |> plot |> facet!","category":"page"},{"location":"generated/gallery/#Facet-wrap","page":"Example gallery","title":"Facet wrap","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (x=rand(100), y=rand(100), l=rand([\"a\", \"b\", \"c\", \"d\", \"e\"], 100))\ndata(df) * mapping(:x, :y, layout=:l) |> plot |> facet!","category":"page"},{"location":"generated/gallery/#Embedding-facets","page":"Example gallery","title":"Embedding facets","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"All SplitApplyPlot plots can be inserted in any figure position, where the rest of the figure is managed by vanilla Makie. For example","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (x=rand(100), y=rand(100), i=rand([\"a\", \"b\", \"c\"], 100), j=rand([\"d\", \"e\", \"f\"], 100))\nresolution = (800, 400)\nfig = Figure(; resolution)\nax = Axis(fig[1, 1], title=\"Some plot\")\nlayer = data(df) * mapping(:x, :y, col=:i, row=:j)\nsubfig = fig[1, 2:3]\nag = plot!(subfig, layer)\nfacet!(subfig, ag)\nfor ae in ag\n    Axis(ae).xticklabelrotation[] = π/2\nend\nfig","category":"page"},{"location":"generated/gallery/#Adding-traces-to-only-some-subplots","page":"Example gallery","title":"Adding traces to only some subplots","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df1 = (x=rand(100), y=rand(100), i=rand([\"a\", \"b\", \"c\"], 100), j=rand([\"d\", \"e\", \"f\"], 100))\ndf2 = (x=[0, 1], y=[0.5, 0.5], i=fill(\"a\", 2), j=fill(\"e\", 2))\nm = mapping(:x, :y, col=:i, row=:j)\ngeoms = data(df1) * visual(Scatter) + data(df2) * visual(Lines)\nm * geoms |> plot |> facet!","category":"page"},{"location":"generated/gallery/#Statistical-analyses","page":"Example gallery","title":"Statistical analyses","text":"","category":"section"},{"location":"generated/gallery/#Density-plot","page":"Example gallery","title":"Density plot","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (x=randn(1000), c=rand([\"a\", \"b\"], 1000))\ndata(df) * mapping(:x, color=:c) * SplitApplyPlot.density(bandwidth=0.5) |> plot","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (x=randn(1000), c=rand([\"a\", \"b\"], 1000))\nlayer = data(df) * mapping(:x, color=:c) * SplitApplyPlot.density(bandwidth=0.5) *\n    visual(orientation=:vertical)\n\"Not yet supported\" # hide","category":"page"},{"location":"generated/gallery/#Discrete-scales","page":"Example gallery","title":"Discrete scales","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"By default categorical ticks, as well as names from legend entries, are taken from the value of the variable converted to a string. Scales can be equipped with labels to overwrite that","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (x=rand([\"a\", \"b\", \"c\"], 100), y=rand(100))\ndata(df) * mapping(:x, :y) * visual(BoxPlot) |> plot","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (x=rand([\"a\", \"b\", \"c\"], 100), y=rand(100))\nlayer = data(df) *\n    mapping(\n        :x => renamer(\"a\" => \"label1\", \"b\" => \"label2\", \"c\" => \"label3\"),\n        :y\n    ) * visual(BoxPlot)\nplot(layer)","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"The order can also be changed by tweaking the scale","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"layer = data(df) *\n    mapping(\n        :x => renamer(\"b\" => \"label b\", \"a\" => \"label a\", \"c\" => \"label c\"),\n        :y\n    ) * visual(BoxPlot)\nplot(layer)","category":"page"},{"location":"generated/gallery/#Continuous-scales","page":"Example gallery","title":"Continuous scales","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"x = 1:100\ny = @. sqrt(x) + 20x + 100\ndf = (; x, y)\nlayer = data(df) *\n    mapping(\n        :x,\n        :y => log => \"√x + 20x + 100 (log scale)\",\n    ) * visual(Lines)\nplot(layer)","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"x = 1:100\ny = @. sqrt(x) + 20x + 100\ndf = (; x, y)\nlayer = data(df) *\n    mapping(\n        :x,\n        :y => \"√x + 20x + 100\",\n    ) * visual(Lines)\nplot(layer, axis=(yscale=log,))","category":"page"},{"location":"generated/gallery/#Custom-scales","page":"Example gallery","title":"Custom scales","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"Sometimes, there is no default palettes for a specific attribute. In that case, the user can pass their own.","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"using Colors\nx=repeat(1:20, inner=20)\ny=repeat(1:20, outer=20)\nu=cos.(x)\nv=sin.(y)\nc=rand(Bool, length(x))\nd=rand(Bool, length(x))\ndf = (; x, y, u, v, c, d)\ncolors = [colorant\"#E24A33\", colorant\"#348ABD\"]\nheads = ['▲', '●']\nlayer = data(df) *\n    mapping(:x, :y, :u, :v) *\n    mapping(arrowhead=:c => nonnumeric) *\n    mapping(arrowcolor=:d => nonnumeric) *\n    visual(Arrows, arrowsize=10, lengthscale=0.3)\nplot(layer; palettes=(arrowcolor=colors, arrowhead=heads))","category":"page"},{"location":"generated/gallery/#Axis-and-figure-keywords","page":"Example gallery","title":"Axis and figure keywords","text":"","category":"section"},{"location":"generated/gallery/#Axis-tweaking","page":"Example gallery","title":"Axis tweaking","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"To tweak one or more axes, simply use the axis keyword when plotting. For example","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (x=rand(100), y=rand(100), z=rand(100))\nm = data(df) * mapping(:x, :y)\ngeoms = linear() + mapping(color=:z)\nplot(m * geoms, axis=(aspect=1,))","category":"page"},{"location":"generated/gallery/#Figure-tweaking","page":"Example gallery","title":"Figure tweaking","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (x=rand(100), y=rand(100), z=rand(100), c=rand([\"a\", \"b\"], 100))\nm = data(df) * mapping(:x, :y, layout=:c)\ngeoms = linear() + mapping(color=:z)\nfg = plot(m * geoms, axis=(aspect=1,), figure=(resolution=(800, 400),))\nfacet!(fg)","category":"page"},{"location":"generated/gallery/#Multiple-selection","page":"Example gallery","title":"Multiple selection","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"Selecting multiple columns at once can have two possible applications. One is \"wide data\", the other is on-the-fly creating of novel columns.","category":"page"},{"location":"generated/gallery/#Wide-data","page":"Example gallery","title":"Wide data","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (a=randn(100), b=randn(100), c=randn(100))\nm = data(df) * mapping((:a, :b, :c) .=> \"some label\") * mapping(color=dims(1))\nplot(m * SplitApplyPlot.density())","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (a=rand(100), b=rand(100), c=rand(100), d=rand(100))\nm = data(df) * mapping(1, 2:4, color=dims(1))\ngeoms = linear() + visual(Scatter)\nfg = plot(m * geoms)","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"The wide format is combined with broadcast semantics.","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (sepal_length=rand(100), sepal_width=rand(100), petal_length=rand(100), petal_width=rand(100))\nxvars = [\"sepal_length\", \"sepal_width\"]\nyvars = [\"petal_length\" \"petal_width\"]\nm = data(df) * mapping(\n    xvars .=> \"sepal\",\n    yvars .=> \"petal\",\n    row=dims(1) => c -> split(xvars[c], '_')[2],\n    col=dims(2) => c -> split(yvars[c], '_')[2],\n)\ngeoms = linear() + visual(Scatter)\nfacet!(plot(m * geoms))","category":"page"},{"location":"generated/gallery/#Wide-data-for-time-series","page":"Example gallery","title":"Wide data for time series","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"using Dates\n\nx = today() - Year(1) : Day(1) : today()\ny = cumsum(randn(length(x)))\nz = cumsum(randn(length(x)))\ndf = (; x, y, z)\nplt = data(df) * mapping(:x, [:y, :z], color=dims(1)) * visual(Lines)\ndraw(plt)","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"x = now() - Hour(6) : Minute(1) : now()\ny = cumsum(randn(length(x)))\nz = cumsum(randn(length(x)))\ndf = (; x, y, z)\nplt = data(df) * mapping(:x, [:y, :z], color=dims(1)) * visual(Lines)\ndraw(plt)","category":"page"},{"location":"generated/gallery/#New-columns-on-the-fly","page":"Example gallery","title":"New columns on the fly","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"df = (x=rand(100), y=rand(100), z=rand(100), c=rand([\"a\", \"b\"], 100))\nm = data(df) * mapping(:x, (:x, :y, :z) => (+) => \"x + y + z\", layout=:c)\ngeoms = linear() + mapping(color=:z)\nfg = plot(m * geoms)\nfacet!(fg)","category":"page"},{"location":"generated/gallery/#Legends","page":"Example gallery","title":"Legends","text":"","category":"section"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"N = 20\n\nx = [1:N; 1:N; 1:N; 1:N]\ny = [2 .+ cumsum(randn(N)); -2 .+ cumsum(randn(N)); 2.5 .+ cumsum(randn(N)); cumsum(randn(N))]\ngrp1 = [fill(\"a\", 2N); fill(\"b\", 2N)]\ngrp2 = [fill(\"c\", N); fill(\"d\", N); fill(\"c\", N); fill(\"d\", N)]\nz = 20 .* rand(4N)\n\ndf = (; x, y, z, grp1, grp2)\n\nline = visual(Lines, linewidth = 2) * mapping(linestyle = :grp2, group = :grp1)\nscat = visual(Scatter) * mapping(marker = :grp1, markersize = :z)\nspecs = data(df) * mapping(:x, :y) * mapping(color = :grp1) * (line + scat)\n\nfg = draw(specs)\nLegend(fg, Entries(specs))\nfg","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"","category":"page"},{"location":"generated/gallery/","page":"Example gallery","title":"Example gallery","text":"This page was generated using Literate.jl.","category":"page"},{"location":"layers/introduction/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"layers/introduction/","page":"Introduction","title":"Introduction","text":"Layers are the key building block of SplitApplyPlots.","category":"page"},{"location":"layers/introduction/","page":"Introduction","title":"Introduction","text":"Each layer is composed of the following fields.","category":"page"},{"location":"layers/introduction/","page":"Introduction","title":"Introduction","text":"Data.\nMappings.\nTransformations:\nVisual Transformations,\nData Transformations.","category":"page"},{"location":"layers/introduction/","page":"Introduction","title":"Introduction","text":"Layers can be combined with Algebraic Operations.","category":"page"},{"location":"layers/introduction/","page":"Introduction","title":"Introduction","text":"Finally, Drawing Layers is the last step of the pipeline.","category":"page"},{"location":"layers/data/#Data","page":"Data","title":"Data","text":"","category":"section"},{"location":"layers/data/","page":"Data","title":"Data","text":"The data field of a layer contains the dataset that will be used to populate the plot. There are no type restrictions on this dataset, as long as it respects the Tables interface. In particular, any one of these formats should work out of the box.","category":"page"},{"location":"layers/data/","page":"Data","title":"Data","text":"The data helper function creates an under-defined layer, where only the data field is populated..","category":"page"},{"location":"layers/data/","page":"Data","title":"Data","text":"using SplitApplyPlot\ndf = (a = rand(10), b = rand(10))\ndata(df)","category":"page"},{"location":"generated/entries/","page":"Entries","title":"Entries","text":"EditURL = \"https://github.com/piever/SplitApplyPlot.jl/blob/master/docs/src/generated/entries.jl\"","category":"page"},{"location":"generated/entries/#Entries","page":"Entries","title":"Entries","text":"","category":"section"},{"location":"generated/entries/","page":"Entries","title":"Entries","text":"The key ingredient for data representations are AxisEntries.","category":"page"},{"location":"generated/entries/#The-AxisEntries-type","page":"Entries","title":"The AxisEntries type","text":"","category":"section"},{"location":"generated/entries/","page":"Entries","title":"Entries","text":"An AxisEntries object is made of four components:","category":"page"},{"location":"generated/entries/","page":"Entries","title":"Entries","text":"axis,\nentries.","category":"page"},{"location":"generated/entries/","page":"Entries","title":"Entries","text":"using SplitApplyPlot, CairoMakie\nusing SplitApplyPlot: CategoricalScale, ContinuousScale\nresolution = (600, 600)\nfig = Figure(; resolution)\nN = 11\nrg = range(1, 2, length=N)\nae = AxisEntries(\n    Axis(fig[1, 1]),\n    [\n        Entry(\n            Scatter,\n            arguments(rg, cosh.(rg), color=1:N, marker=fill(\"b\", N));\n            markersize = 15\n        ),\n        Entry(\n            Scatter,\n            arguments(rg, sinh.(rg), color=1:N, marker=fill(\"c\", N));\n            markersize = 15\n        ),\n    ],\n    arguments(\n        ContinuousScale(identity, (0, 4)),\n        ContinuousScale(identity, (0, 4)),\n        color=ContinuousScale(identity, (1, N)),\n        marker=CategoricalScale([\"a\", \"b\", \"c\"], [:circle, :utriangle, :dtriangle]), #scales\n    ),\n    arguments(\"x\", \"y\", color=\"identity\", marker=\"function\"), #labels\n)\nplot!(ae)\nfig","category":"page"},{"location":"generated/entries/","page":"Entries","title":"Entries","text":"","category":"page"},{"location":"generated/entries/","page":"Entries","title":"Entries","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/visualtransformations/","page":"Visual Transformations","title":"Visual Transformations","text":"EditURL = \"https://github.com/piever/SplitApplyPlot.jl/blob/master/docs/src/generated/visualtransformations.jl\"","category":"page"},{"location":"generated/visualtransformations/#Visual-Transformations","page":"Visual Transformations","title":"Visual Transformations","text":"","category":"section"},{"location":"generated/visualtransformations/","page":"Visual Transformations","title":"Visual Transformations","text":"The function visual can be used to give data-independent visual information about the plot (plotting function or attributes).","category":"page"},{"location":"generated/visualtransformations/","page":"Visual Transformations","title":"Visual Transformations","text":"using SplitApplyPlot, CairoMakie, PalmerPenguins, DataFrames\n\npenguins = dropmissing(DataFrame(PalmerPenguins.load()))\n\ndata(penguins) * visual(Violin) *\n    mapping(:species, :bill_depth_mm, color=:sex, dodge=:sex) |> draw","category":"page"},{"location":"generated/visualtransformations/","page":"Visual Transformations","title":"Visual Transformations","text":"plt = data(penguins) * visual(Violin)\nplt *= mapping(:species, :bill_depth_mm, color=:sex, side=:sex, dodge=:island)\ndraw(plt, axis=(limits=((0.5, 3.5), nothing),))","category":"page"},{"location":"generated/visualtransformations/","page":"Visual Transformations","title":"Visual Transformations","text":"data(penguins) * visual(BoxPlot, show_notch=true) *\n    mapping(:species, :bill_depth_mm, color=:sex, dodge=:sex) |> draw","category":"page"},{"location":"generated/visualtransformations/","page":"Visual Transformations","title":"Visual Transformations","text":"data(penguins) *\n    mapping(:bill_length_mm, :bill_depth_mm, col=:sex) *\n    visual(QQPlot, qqline=:fit) |> draw","category":"page"},{"location":"generated/visualtransformations/","page":"Visual Transformations","title":"Visual Transformations","text":"","category":"page"},{"location":"generated/visualtransformations/","page":"Visual Transformations","title":"Visual Transformations","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"EditURL = \"https://github.com/piever/SplitApplyPlot.jl/blob/master/docs/src/generated/penguins.jl\"","category":"page"},{"location":"generated/penguins/#Tutorial","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"","category":"section"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"This is a gentle and lighthearted tutorial on how to use tools from SplitApplyPlot, using as example dataset a collection of measurements on penguins[1]. See the Palmer penguins website for more information.","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"[1]: Gorman KB, Williams TD, Fraser WR (2014) Ecological Sexual Dimorphism and Environmental Variability within a Community of Antarctic Penguins (Genus Pygoscelis). PLoS ONE 9(3): e90081. DOI","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"using PalmerPenguins, DataFrames\n\npenguins = dropmissing(DataFrame(PalmerPenguins.load()))\nfirst(penguins, 6)","category":"page"},{"location":"generated/penguins/#Frequency-plots","page":"Tutorial 🐧","title":"Frequency plots","text":"","category":"section"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"Let us start by getting a rough idea of how the data is distributed","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"using SplitApplyPlot, CairoMakie\nset_aog_theme!()\n\naxis = (width = 225, height = 225)\nspecs = data(penguins) * frequency() * mapping(:species)\ndraw(specs; axis)","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"Next, let us see whether the distribution is the same across islands.","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"plt = specs * mapping(color = :island)\ndraw(plt; axis)","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"Ups! The bars are in the same spot and are hiding each other. We need to specify how we want to fix this. Bars can either dodge each other, or be stacked on top of each other.","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"plt = specs * mapping(color = :island, dodge = :island)\ndraw(plt; axis)","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"plt = specs * mapping(color = :island, dodge = :island)\nfg = draw(plt; axis)\nLegend(fg.figure[1, 2], plt)\nSplitApplyPlot.resizetocontent!(fg)\nfg","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"This is our first finding. Adelie is the only species of penguins that can be found on all three islands. To be able to see both which species is more numerous and how different species are distributed across islands in a unique plot, we could have used stack.","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"plt = specs * mapping(color = :island, stack = :island)\ndraw(plt; axis)","category":"page"},{"location":"generated/penguins/#Correlating-two-variables","page":"Tutorial 🐧","title":"Correlating two variables","text":"","category":"section"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"Now that we have understood the distribution of these three penguin species, we can start analyzing their features.","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"specs = data(penguins) * mapping(:bill_length_mm, :bill_depth_mm)\ndraw(specs; axis)","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"We would actually prefer to visualize these measures in centimeters, and to have cleaner axes labels. As we want this setting to be preserved in all of our bill visualizations, let us save it in the variable specs.","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"specs = data(penguins) * mapping(\n    :bill_length_mm => (t -> t / 10) => \"bill length (cm)\",\n    :bill_depth_mm => (t -> t / 10) => \"bill depth (cm)\",\n)\ndraw(specs; axis)","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"Much better! Note the parentheses around the function t -> t / 10. They are necessary to specify that the function maps t to t / 10, and not to t / 10 => \"bill length (cm)\".","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"There does not seem to be a strong correlation between the two dimensions, which is odd. Maybe dividing the data by species will help.","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"plt = specs * mapping(color = :species)\ndraw(plt; axis)","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"Ha! Within each species, penguins with a longer bill also have a deeper bill. We can confirm that with a linear regression","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"an = linear()\nplt = specs * an * mapping(color = :species)\ndraw(plt; axis)","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"This unfortunately no longer shows our data! We can use + to plot both things on top of each other:","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"plt = specs * an * mapping(color = :species) + specs * mapping(color = :species)\ndraw(plt; axis)","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"Note that the above expression seems a bit redundant, as we wrote the same thing twice. We can \"factor it out\" as follows","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"plt = specs * (an + mapping()) * mapping(color = :species)\ndraw(plt; axis)","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"where mapping() is a neutral multiplicative element. Of course, the above could be refactored as","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"ans = linear() + mapping()\nplt = specs * ans * mapping(color = :species)\ndraw(plt; axis)","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"We could actually take advantage of the spare mapping() and use it to pass some extra info to the scatter, while still using all the species members to compute the linear fit.","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"ans = linear() + mapping(marker = :sex)\nplt = specs * ans * mapping(color = :species)\ndraw(plt; axis)","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"This plot is getting a little bit crowded. We could instead analyze female and male penguins in separate subplots.","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"ans = linear() + mapping(col = :sex)\nplt = specs * ans * mapping(color = :species)\ndraw(plt; axis)","category":"page"},{"location":"generated/penguins/#Smooth-density-plots","page":"Tutorial 🐧","title":"Smooth density plots","text":"","category":"section"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"An alternative approach to understanding how two variables interact is to consider their joint probability density distribution (pdf).","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"using SplitApplyPlot: density\nan = density(npoints=50)\nplt = specs * an * mapping(col = :species)\ndraw(plt; axis)","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"The default colormap is multi-hue, but it is possible to pass single-hue colormaps as well:","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"draw(plt * visual(colormap = :grayC); axis)","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"A Heatmap (the default visualization for a 2D density) is a bit unfortunate if we want to mark species by color. In that case, one can use visual to change the default visualization and, optionally, fine tune some arguments. In this case, a Wireframe with thin lines looks quite nice. (Note that, for the time being, we must specify explicitly that we require a 3D axis.)","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"using SplitApplyPlot: density\naxis = (type = Axis3, width = 300, height = 300)\nan = density() * visual(Wireframe, linewidth=0.05)\nplt = specs * an * mapping(color = :species)\ndraw(plt; axis)","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"Of course, a more traditional approach would be to use a Contour plot instead:","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"using SplitApplyPlot: density\naxis = (width = 225, height = 225)\nan = density() * visual(Contour)\nplt = specs * an * mapping(color = :species)\ndraw(plt; axis)","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"The data and the linear fit can also be added back to the plot:","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"ans = density() * visual(Contour) + linear() + mapping()\nplt = specs * ans * mapping(color = :species)\ndraw(plt; axis)","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"In the case of many layers (contour, density and scatter) it is important to think about balance. In the above plot, the markers are quite heavy and can obscure the linear fit and the contour lines. We can lighten the markers using alpha transparency.","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"ans = density() * visual(Contour, linewidth = 1.5) + linear() + visual(alpha = 0.5)\nplt = specs * ans * mapping(color = :species)\ndraw(plt; axis)","category":"page"},{"location":"generated/penguins/#Correlating-three-variables","page":"Tutorial 🐧","title":"Correlating three variables","text":"","category":"section"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"We are now mostly up to speed with bill size, but we have not consider how it relates to other penguin features, such as their weight. For that, a possible approach is to use a continuous color on a gradient to denote weight and different marker shapes to denote species.","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"body_mass = :body_mass_g => (t -> t / 1000) => \"body mass (kg)\"\nans = linear() + mapping(color = body_mass)\nplt = specs * ans * mapping(marker = :species)\ndraw(plt; axis)","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"Naturally, within each species, heavier penguins have bigger bills, but perhaps counter-intuitively the species with the shallowest bills features the heaviest penguins. We could also try and see the interplay of these three variables in a 3D plot.","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"axis = (type = Axis3, width = 300, height = 300)\nspecs3D = specs * mapping(body_mass)\nplt = specs3D * mapping(color = :species)\ndraw(plt; axis)","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"plt = specs3D * mapping(color = :species, layout = :sex)\ndraw(plt; axis)","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"Note that static 3D plot can be misleading, as they only show one projection of 3D data. They are mostly useful when shown interactively.","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"","category":"page"},{"location":"generated/penguins/","page":"Tutorial 🐧","title":"Tutorial 🐧","text":"This page was generated using Literate.jl.","category":"page"},{"location":"layers/mappings/#Mappings","page":"Mappings","title":"Mappings","text":"","category":"section"},{"location":"layers/mappings/","page":"Mappings","title":"Mappings","text":"Mappings determine how the date is translated into a plot. Positional mappings correspond to the x, y or z axes of the plot, whereas the keyword arguments correspond to plot attributes that can vary continuously or discretely, such as color or markersize.","category":"page"},{"location":"layers/mappings/","page":"Mappings","title":"Mappings","text":"Mapping variables  are split according to the categorical attributes in it, and then converted to plot attributes using a default palette.","category":"page"},{"location":"layers/mappings/","page":"Mappings","title":"Mappings","text":"using SplitApplyPlot\nmapping(:weight_mm => \"weight (mm)\", :height_mm => \"height (mm)\", marker = :gender)","category":"page"},{"location":"API/#API","page":"API","title":"API","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"","category":"page"},{"location":"API/","page":"API","title":"API","text":"Modules = [SplitApplyPlot]","category":"page"},{"location":"API/#SplitApplyPlot.AxisEntries","page":"API","title":"SplitApplyPlot.AxisEntries","text":"AxisEntries(axis::Union{Axis, Nothing}, entries::Vector{Entry}, labels, scales)\n\nDefine all ingredients to make plots on an axis. Each scale can be either a CategoricalScale (for discrete collections), such as CategoricalScale([\"a\", \"b\"], [\"red\", \"blue\"]), or a function, such as log10. Other scales may be supported in the future.\n\n\n\n\n\n","category":"type"},{"location":"API/#SplitApplyPlot.density-Tuple{}","page":"API","title":"SplitApplyPlot.density","text":"density(; extrema, npoints, kernel, bandwidth)\n\nFit a kernel density estimation of data.\n\n\n\n\n\n","category":"method"},{"location":"API/#SplitApplyPlot.expectation-Tuple{}","page":"API","title":"SplitApplyPlot.expectation","text":"expectation(args...)\n\nCompute the expected value of the last argument conditioned on the preceding ones.\n\n\n\n\n\n","category":"method"},{"location":"API/#SplitApplyPlot.frequency-Tuple{}","page":"API","title":"SplitApplyPlot.frequency","text":"frequency()\n\nCompute a frequency table of the arguments.\n\n\n\n\n\n","category":"method"},{"location":"API/#SplitApplyPlot.histogram-Tuple{}","page":"API","title":"SplitApplyPlot.histogram","text":"histogram(; bins=automatic, wts=automatic, normalization=:none)\n\nCompute a histogram. bins can be an Int to create that number of equal-width bins over the range of values. Alternatively, it can be a sorted iterable of bin edges. The histogram can be normalized by setting normalization. Possible values are:\n\n:pdf: Normalize by sum of weights and bin sizes. Resulting histogram  has norm 1 and represents a PDF.\n:density: Normalize by bin sizes only. Resulting histogram represents  count density of input and does not have norm 1.\n:probability: Normalize by sum of weights only. Resulting histogram  represents the fraction of probability mass for each bin and does not have  norm 1.\n:none: Do not normalize.\n\nWeighted data is supported via the keyword wts.\n\nnote: Note\nNormalizations are computed withing groups. For example, in the case of normalization=:pdf, sum of weights within each group will be equal to 1.\n\n\n\n\n\n","category":"method"},{"location":"API/#SplitApplyPlot.iscontinuous-Tuple{AbstractArray}","page":"API","title":"SplitApplyPlot.iscontinuous","text":"iscontinuous(v::AbstractArray)\n\nDetermine whether v should be treated as a continuous or categorical vector.\n\n\n\n\n\n","category":"method"},{"location":"API/#SplitApplyPlot.linear-Tuple{}","page":"API","title":"SplitApplyPlot.linear","text":"linear(; interval)\n\nCompute a linear fit of y ~ 1 + x. An optional named mapping wts determines the weights. Use interval to specify what type of interval the shaded band should represent. Valid values of interval are :confidence delimiting the uncertainty of the predicted relationship, and :prediction delimiting estimated bounds for new data points.\n\n\n\n\n\n","category":"method"},{"location":"API/#SplitApplyPlot.linesfill!-Tuple","page":"API","title":"SplitApplyPlot.linesfill!","text":"linesfill(xs, ys, lower, upper; kwargs...)\n\nLine plot with a shaded area between lower and upper. If lower and upper are not given, shaded area is between 0 and ys.\n\nAttributes\n\nAvailable attributes and their defaults for Combined{SplitApplyPlot.linesfill!, T} where T are: \n\n\n\n\n\n\n\n","category":"method"},{"location":"API/#SplitApplyPlot.linesfill-Tuple","page":"API","title":"SplitApplyPlot.linesfill","text":"linesfill(xs, ys, lower, upper; kwargs...)\n\nLine plot with a shaded area between lower and upper. If lower and upper are not given, shaded area is between 0 and ys.\n\nAttributes\n\nAvailable attributes and their defaults for Combined{SplitApplyPlot.linesfill, T} where T are: \n\n  color       :black\n  colormap    :viridis\n  colorrange  AbstractPlotting.Automatic()\n  fillalpha   0.15\n  linestyle   \"nothing\"\n  linewidth   1.0\n\n\n\n\n\n","category":"method"},{"location":"API/#SplitApplyPlot.smooth-Tuple{}","page":"API","title":"SplitApplyPlot.smooth","text":"smooth(span=0.75, degreee=2)\n\nFit a loess model. span is the degree of smoothing, typically in [0,1]. Smaller values result in smaller local context in fitting. degree is the polynomial degree used in the loess model.\n\n\n\n\n\n","category":"method"},{"location":"layers/draw/#Drawing-Layers","page":"Drawing Layers","title":"Drawing Layers","text":"","category":"section"},{"location":"layers/draw/","page":"Drawing Layers","title":"Drawing Layers","text":"A Layers object can be plotted using the function draw.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"CurrentModule = SplitApplyPlot","category":"page"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"SplitApplyPlot defines an algebra of graphics based on a few simple building blocks that can be combined using + and *.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"See the Tutorial to get started.","category":"page"}]
}
